#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
{{ project_name }} 主程序
{{ project_description }}
"""

import os
import sys
import logging
import argparse
import signal
import atexit
from pathlib import Path
from typing import Optional, Dict, Any

# 添加项目根目录到 Python 路径
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

# 配置日志
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(project_root / "logs" / "app.log"),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger(__name__)


class Application:
    """应用程序类"""

    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        初始化应用程序

        Args:
            config: 配置字典
        """
        self.config = config or {}
        self.running = False
        self._setup_signal_handlers()
        self._setup_exit_handlers()

    def _setup_signal_handlers(self):
        """设置信号处理器"""
        signal.signal(signal.SIGINT, self._handle_signal)
        signal.signal(signal.SIGTERM, self._handle_signal)

    def _setup_exit_handlers(self):
        """设置退出处理器"""
        atexit.register(self.cleanup)

    def _handle_signal(self, signum: int, frame):
        """
        处理信号

        Args:
            signum: 信号编号
            frame: 当前栈帧
        """
        logger.info(f"收到信号 {signum}")
        self.stop()

    def start(self) -> bool:
        """
        启动应用程序

        Returns:
            bool: 是否成功启动
        """
        try:
            logger.info("正在启动应用程序...")
            self.running = True
            
            # TODO: 在这里添加启动逻辑
            
            logger.info("应用程序已启动")
            return True
        except Exception as e:
            logger.exception("启动应用程序时出错")
            return False

    def stop(self) -> bool:
        """
        停止应用程序

        Returns:
            bool: 是否成功停止
        """
        try:
            if not self.running:
                return True

            logger.info("正在停止应用程序...")
            self.running = False
            
            # TODO: 在这里添加停止逻辑
            
            logger.info("应用程序已停止")
            return True
        except Exception as e:
            logger.exception("停止应用程序时出错")
            return False

    def cleanup(self):
        """清理资源"""
        try:
            logger.info("正在清理资源...")
            
            # TODO: 在这里添加清理逻辑
            
            logger.info("资源清理完成")
        except Exception as e:
            logger.exception("清理资源时出错")


def parse_args() -> argparse.Namespace:
    """
    解析命令行参数

    Returns:
        argparse.Namespace: 解析后的参数
    """
    parser = argparse.ArgumentParser(description="{{ project_description }}")
    parser.add_argument(
        "--config",
        type=str,
        help="配置文件路径",
        default="config.yaml"
    )
    parser.add_argument(
        "--log-level",
        type=str,
        choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
        help="日志级别",
        default="INFO"
    )
    return parser.parse_args()


def main() -> int:
    """
    主程序入口

    Returns:
        int: 退出码
    """
    try:
        # 解析命令行参数
        args = parse_args()
        
        # 设置日志级别
        logger.setLevel(getattr(logging, args.log_level))
        
        # 创建并启动应用程序
        app = Application()
        if not app.start():
            return 1
        
        # 等待应用程序结束
        while app.running:
            try:
                signal.pause()
            except KeyboardInterrupt:
                break
        
        return 0
    except Exception as e:
        logger.exception("程序异常退出")
        return 1


if __name__ == "__main__":
    sys.exit(main()) 