#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
{{ project_name }} 测试模块
"""

import os
import sys
import pytest
import logging
import signal
from pathlib import Path
from unittest.mock import Mock, patch

# 添加项目根目录到 Python 路径
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

# 导入被测试的模块
from src.main import Application, main, parse_args


@pytest.fixture
def app():
    """应用程序实例"""
    return Application()


@pytest.fixture
def mock_logger():
    """模拟日志记录器"""
    with patch("src.main.logger") as mock:
        yield mock


def test_application_init():
    """测试应用程序初始化"""
    app = Application()
    assert app.config == {}
    assert not app.running

    config = {"test": "config"}
    app = Application(config)
    assert app.config == config


def test_application_start(app, mock_logger):
    """测试应用程序启动"""
    assert app.start()
    assert app.running
    mock_logger.info.assert_called_with("应用程序已启动")


def test_application_stop(app, mock_logger):
    """测试应用程序停止"""
    app.running = True
    assert app.stop()
    assert not app.running
    mock_logger.info.assert_called_with("应用程序已停止")


def test_application_cleanup(app, mock_logger):
    """测试应用程序清理"""
    app.cleanup()
    mock_logger.info.assert_called_with("资源清理完成")


def test_application_signal_handling(app, mock_logger):
    """测试应用程序信号处理"""
    app.running = True
    app._handle_signal(signal.SIGINT, None)
    assert not app.running
    mock_logger.info.assert_called_with("收到信号 2")


def test_parse_args():
    """测试命令行参数解析"""
    with patch("sys.argv", ["script.py", "--config", "test.yaml", "--log-level", "DEBUG"]):
        args = parse_args()
        assert args.config == "test.yaml"
        assert args.log_level == "DEBUG"


def test_main_success(mock_logger):
    """测试主程序成功执行"""
    with patch("src.main.Application") as mock_app:
        instance = mock_app.return_value
        instance.start.return_value = True
        instance.running = True
        
        with patch("signal.pause", side_effect=KeyboardInterrupt):
            assert main() == 0
        
        instance.start.assert_called_once()
        instance.stop.assert_called_once()


def test_main_failure(mock_logger):
    """测试主程序失败执行"""
    with patch("src.main.Application") as mock_app:
        instance = mock_app.return_value
        instance.start.return_value = False
        assert main() == 1
        instance.start.assert_called_once()


@pytest.mark.parametrize(
    "test_input,expected",
    [
        ({"config": "test.yaml"}, "test.yaml"),
        ({}, "config.yaml"),
    ],
)
def test_parse_args_config(test_input, expected):
    """测试配置文件参数解析"""
    with patch("sys.argv", ["script.py"] + [f"--{k}", v for k, v in test_input.items()]):
        args = parse_args()
        assert args.config == expected


@pytest.mark.parametrize(
    "test_input,expected",
    [
        ("DEBUG", logging.DEBUG),
        ("INFO", logging.INFO),
        ("WARNING", logging.WARNING),
        ("ERROR", logging.ERROR),
        ("CRITICAL", logging.CRITICAL),
    ],
)
def test_parse_args_log_level(test_input, expected):
    """测试日志级别参数解析"""
    with patch("sys.argv", ["script.py", "--log-level", test_input]):
        args = parse_args()
        assert args.log_level == test_input


class TestApplication:
    """应用程序测试类"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """测试设置"""
        self.app = Application()
        yield
        if self.app.running:
            self.app.stop()

    def test_start_stop_cycle(self):
        """测试启动停止循环"""
        assert self.app.start()
        assert self.app.running
        assert self.app.stop()
        assert not self.app.running

    def test_multiple_stops(self):
        """测试多次停止"""
        assert self.app.start()
        assert self.app.stop()
        assert self.app.stop()  # 应该不会出错

    def test_cleanup_after_stop(self):
        """测试停止后清理"""
        assert self.app.start()
        assert self.app.stop()
        self.app.cleanup()  # 应该不会出错

    def test_signal_handling_chain(self):
        """测试信号处理链"""
        assert self.app.start()
        self.app._handle_signal(signal.SIGTERM, None)
        assert not self.app.running 